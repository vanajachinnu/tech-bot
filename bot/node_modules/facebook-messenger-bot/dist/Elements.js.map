{"version":3,"sources":["../src/Elements.js"],"names":["Elements","_elements","_quickreplies","_listStyle","text","image","subtext","buttons","Array","isArray","from","Error","push","quickreplies","listStyle","build","length","elements","e","element","title","image_url","subtitle","toJSON","attachment","type","payload","template_type","top_element_style","url","built","quick_replies"],"mappings":"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","file":"Elements.js","sourcesContent":["import Buttons from './Buttons';\nimport QuickReplies from './QuickReplies';\n\nclass Elements {\n  constructor() {\n    this._elements = [];\n    this._quickreplies = null;\n    this._listStyle = null;\n  }\n\n  add({text, image, subtext, buttons}) {\n    if (buttons) {\n      if (!(buttons instanceof Buttons)) {\n        if (Array.isArray(buttons)) {\n          buttons = Buttons.from(buttons);\n        } else {\n          throw Error('Unable to parse buttons');\n        }\n      }\n    }\n\n    this._elements.push({text, image, subtext, buttons});\n    return this;\n  }\n\n  setQuickReplies(quickreplies) {\n    if (quickreplies) {\n      if (!(quickreplies instanceof QuickReplies)) {\n        if (Array.isArray(quickreplies)) {\n          quickreplies = QuickReplies.from(quickreplies);\n        } else {\n          throw Error('Unable to parse quickreplies');\n        }\n      }\n    }\n\n    this._quickreplies = quickreplies;\n  }\n\n  setListStyle(listStyle) {\n    if (listStyle === 'large' || listStyle === 'compact') {\n      this._listStyle = listStyle;\n    } else {\n      throw Error('Valid values for list styles are \"large\" or \"compact\"');\n    }\n  }\n\n  getQuickReplies() {\n    return this._quickreplies;\n  }\n\n  get length() {\n    return this._elements.length;\n  }\n\n  toJSON() {\n    const build = () => {\n      if (this._elements.length > 1) {\n        const elements = [];\n        for (const e of this._elements) {\n          const element = {};\n          if (e.text) element.title = e.text;\n          if (e.image) element.image_url = e.image;\n          if (e.subtext) element.subtitle = e.subtext;\n          if (e.buttons && e.buttons.length) element.buttons = e.buttons.toJSON();\n          elements.push(element);\n        }\n        if (this._listStyle) {\n          return {\n            attachment: {\n              type: 'template',\n              payload: {template_type: 'list', top_element_style: this._listStyle, elements}\n            }\n          };\n        } else if (!this._listStyle) {\n          return {attachment: {type: 'template', payload: {template_type: 'generic', elements}}};\n        }\n      } else if (this._elements.length === 1) {\n        const e = this._elements[0];\n        const element = {};\n        if (e.text && e.buttons && e.buttons.length && (e.image || e.subtext)) {\n          element.title = e.text;\n          if (e.image) element.image_url = e.image;\n          if (e.subtext) element.subtitle = e.subtext;\n          element.buttons = e.buttons.toJSON();\n          return {attachment: {type: 'template', payload: {template_type: 'generic', elements: [element]}}};\n        } else if (e.text && e.buttons && e.buttons.length) {\n          element.text = e.text;\n          if (e.image) element.image_url = e.image;\n          element.buttons = e.buttons.toJSON();\n          return {attachment: {type: 'template', payload: {template_type: 'button', ...element}}};\n        } else if (e.text) {\n          return {text: e.text};\n        } else if (e.image) {\n          return {attachment: {type: 'image', payload: {url: e.image}}};\n        }\n      }\n\n      throw Error('Could not form a message. Have you followed the format?');\n    };\n\n    const built = build();\n\n    if (this._quickreplies && this._quickreplies.length) {\n      built.quick_replies = this._quickreplies.toJSON();\n    }\n\n    return built;\n  }\n}\n\nexport default Elements;\n"]}