{"version":3,"sources":["../../src/tests/Bot-test.js"],"names":["token","process","env","PAGE_ACCESS_TOKEN","describe","bot","it","once","message","sender","fetch","equal","first_name","last_name","fromCache","done","handleMessage","text","entry","messaging","images","attachments","payload","url"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,QAAQC,QAAQC,GAAR,CAAYC,iBAA1B;;AAEAC,SAAS,KAAT,EAAgB,YAAM;AACpB,MAAMC,MAAM,UAAQL,KAAR,CAAZ;;AAEA,MAAIA,KAAJ,EAAW;AACTM,OAAG,2BAAH,EAAgC,gBAAQ;AACtCD,UAAIE,IAAJ,CAAS,SAAT;AAAA,uEAAoB,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,wBADW,GACDD,OADC,CACXC,MADW;AAAA;AAAA,yBAEZA,OAAOC,KAAP,CAAa,sBAAb,EAAqC,IAArC,CAFY;;AAAA;;AAIlB,mCAAOC,KAAP,CAAaF,OAAOG,UAApB,EAAgC,QAAhC;AACA,mCAAOD,KAAP,CAAaF,OAAOI,SAApB,EAA+B,QAA/B;AACA,mCAAOF,KAAP,CAAaF,OAAOK,SAApB,EAA+B,KAA/B;;AANkB;AAAA,yBAQZL,OAAOC,KAAP,CAAa,sBAAb,EAAqC,IAArC,CARY;;AAAA;AASlB,mCAAOC,KAAP,CAAaF,OAAOK,SAApB,EAA+B,IAA/B;AACAC;;AAVkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAApB;;AAAA;AAAA;AAAA;AAAA;;AAaAV,UAAIW,aAAJ;AACD,KAfD;AAgBD;;AAGDV,KAAG,qBAAH,EAA0B,gBAAQ;AAChCD,QAAIE,IAAJ,CAAS,SAAT;AAAA,sEAAoB,kBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAClB,iCAAOG,KAAP,CAAaH,QAAQS,IAArB,EAA2B,eAAKC,KAAL,CAAW,CAAX,EAAcC,SAAd,CAAwB,CAAxB,EAA2BX,OAA3B,CAAmCS,IAA9D;AACAF;;AAFkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAApB;;AAAA;AAAA;AAAA;AAAA;;AAKAV,QAAIW,aAAJ;AACD,GAPD;;AAUAV,KAAG,uBAAH,EAA4B,gBAAQ;AAClCD,QAAIE,IAAJ,CAAS,SAAT;AAAA,sEAAoB,kBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAClB,iCAAOG,KAAP,CAAaH,QAAQY,MAAR,CAAe,CAAf,CAAb,EAAgC,gBAAMF,KAAN,CAAY,CAAZ,EAAeC,SAAf,CAAyB,CAAzB,EAA4BX,OAA5B,CAAoCa,WAApC,CAAgD,CAAhD,EAAmDC,OAAnD,CAA2DC,GAA3F;AACAR;;AAFkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAApB;;AAAA;AAAA;AAAA;AAAA;;AAKAV,QAAIW,aAAJ;AACD,GAPD;AAQD,CAzCD","file":"Bot-test.js","sourcesContent":["import assert from 'assert';\nimport {Bot} from '../..';\nimport text from '../../fixtures/text.json';\nimport image from '../../fixtures/image.json';\n\nconst token = process.env.PAGE_ACCESS_TOKEN;\n\ndescribe('Bot', () => {\n  const bot = new Bot(token);\n\n  if (token) {\n    it('should fetch user profile', done => {\n      bot.once('message', async message => {\n        const {sender} = message;\n        await sender.fetch('first_name,last_name', true);\n\n        assert.equal(sender.first_name, 'Mathew');\n        assert.equal(sender.last_name, 'Kurian');\n        assert.equal(sender.fromCache, false);\n\n        await sender.fetch('first_name,last_name', true);\n        assert.equal(sender.fromCache, true);\n        done();\n      });\n\n      bot.handleMessage(text);\n    });\n  }\n\n\n  it('should extract text', done => {\n    bot.once('message', async message => {\n      assert.equal(message.text, text.entry[0].messaging[0].message.text);\n      done();\n    });\n\n    bot.handleMessage(text);\n  });\n\n\n  it('should extract images', done => {\n    bot.once('message', async message => {\n      assert.equal(message.images[0], image.entry[0].messaging[0].message.attachments[0].payload.url);\n      done();\n    });\n\n    bot.handleMessage(image);\n  });\n});\n"]}